<?xml version="1.0" encoding="utf-8"?>
<Project ToolsVersion="14.0" DefaultTargets="Build" InitialTargets="EnsurePreconditions" xmlns="http://schemas.microsoft.com/developer/msbuild/2003" TreatAsLocalProperty="WhatIf">
  <Import Project="$([MSBuild]::GetDirectoryNameOfFileAbove($(MSBuildThisFileDirectory), dir.props))\dir.props" />

  <UsingTask TaskName="DownloadStage1Index" AssemblyFile="$(SourceIndexerTasksAssembly)"/>
  <UsingTask TaskName="OverlayDirectory" AssemblyFile="$(SourceIndexerTasksAssembly)"/>

  <PropertyGroup>
    <WhatIf Condition="'$(WhatIf)' != 'true'">false</WhatIf>
  </PropertyGroup>
  <Import Project="$(MSBuildThisFileDirectory)repositories.props" />

  <ItemGroup>
    <OverwriteFiles Include="$(MSBuildThisFileDirectory)/overwrite/**/*"/>
  </ItemGroup>

  <ItemDefinitionGroup>
    <Repository>
      <Branch>main</Branch>
      <LocalPath>$(RepositoryPath)%(Identity)/</LocalPath>
      <ServerPath>%(Url)/tree/%(Branch)/</ServerPath>
      <DisableMsBuildWorkspace>true</DisableMsBuildWorkspace>
    </Repository>

    <RepositoryV2>
      <OutputDir>$(RepositoryPath)%(Identity)/</OutputDir>
      <LocalPath>$(RepositoryPath)%(Identity)/src/</LocalPath>
      <ExtractPath>$(RepositoryPath)%(Identity).ext/</ExtractPath>
      <ExtractSrcPath>$(RepositoryPath)%(Identity).ext/src</ExtractSrcPath>
      <ExtractSlnListPath>$(RepositoryPath)%(Identity)/solutions.txt</ExtractSlnListPath>
      <DisableMsBuildWorkspace>false</DisableMsBuildWorkspace>
    </RepositoryV2>
  </ItemDefinitionGroup>


  <Target Name="EnsurePreconditions">
    <Error Condition="'$(OS)' != 'Windows_NT'" Text="This tool can only be run on Windows_NT."/>

    
  <ItemGroup>
    <Repository Remove="@(Repository)" Condition="'%(Identity)' != '$(SelectedRepository)' AND '$(SelectedRepository)' != ''" />
    <RepositoryV2 Remove="@(RepositoryV2)" Condition="'%(Identity)' != '$(SelectedRepository)' AND '$(SelectedRepository)' != ''" />

    <BuildableRepository Include="@(Repository)" />
    <ExtractedRepository Include="@(RepositoryV2)" />
    <Repository Include="@(RepositoryV2)" />
  </ItemGroup>
  </Target>

  <Target Name="Clean">
    <RemoveDir Directories="$(OutDir)"/>
  </Target>

  <Target Name="PrepareOutput">
    <MakeDir Condition="!Exists('$(OutDir)')" Directories="$(OutDir)"/>
    <MakeDir Condition="!Exists('$(RepositoryPath)')" Directories="$(RepositoryPath)"/>
  </Target>

  <Target Name="CloneRepository" Outputs="%(Repository.Identity)">
    <PropertyGroup>
      <CloneSparse>false</CloneSparse>
      <CloneSparse Condition="'%(Repository.SparseCheckout)' != ''">true</CloneSparse>
      <CloneExists>false</CloneExists>
      <CloneExists Condition="Exists('%(Repository.LocalPath)')">true</CloneExists>
      <CheckoutSubmodules>false</CheckoutSubmodules>
      <CheckoutSubmodules Condition="'%(Repository.CheckoutSubmodules)' == 'true'">true</CheckoutSubmodules>
    </PropertyGroup>
    <MakeDir Condition="!$(CloneExists)"
             Directories="%(Repository.LocalPath)"/>
    <Exec Condition="!$(CloneExists)"
          Command="git init"
          WorkingDirectory="%(Repository.LocalPath)" />
    <Exec Condition="!$(CloneExists)"
          Command="git config core.longpaths true"
          WorkingDirectory="%(Repository.LocalPath)" />
    <Exec Condition="!$(CloneExists) AND $(CloneSparse)"
          Command="git config core.sparsecheckout true"
          WorkingDirectory="%(Repository.LocalPath)" />
    <WriteLinesToFile
          Condition="!$(CloneExists) AND $(CloneSparse)"
          File="$([MSBuild]::NormalizePath('%(Repository.LocalPath)', '.git/info/sparse-checkout'))"
          Lines="%(Repository.SparseCheckout)"/>
    <Exec Condition="!$(CloneExists)"
          Command="git remote add origin %(Repository.Url).git"
          WorkingDirectory="%(Repository.LocalPath)" />
    <Exec Condition="!$(CloneExists)"
          Command="git pull origin %(Repository.Branch)"
          WorkingDirectory="%(Repository.LocalPath)" />
    <Exec Condition="!$(CloneExists) AND $(CheckoutSubmodules)"
          Command="git submodule update --init --recursive"
          WorkingDirectory="%(Repository.LocalPath)" />
  </Target>

  <Target Name="DownloadRepositoryV2" Outputs="%(ExtractedRepository.Identity)">
    <DownloadStage1Index
      RepoName="%(ExtractedRepository.RepoName)"
      BlobContainerSasUrl="$(BlobContainerSasUrl)"
      OutputDirectory="%(ExtractedRepository.ExtractPath)"/>
  </Target>

  <Target Name="ResolveHash" Outputs="%(ExtractedRepository.Identity)">
    <ReadLinesFromFile File="%(ExtractedRepository.ExtractPath)hash">
      <Output TaskParameter="Lines" PropertyName="CommitHash"/>
    </ReadLinesFromFile>
    <ItemGroup>
      <ExtractedRepository Commit="$(CommitHash)" />
      <Repository Condition="'%(Identity)' == '%(ExtractedRepository.Identity)'" ResetCommit="$(CommitHash)" />
    </ItemGroup>
  </Target>

  <Target Name="CheckoutSources" DependsOnTargets="DownloadRepositoryV2;ResolveHash;CloneRepository" Outputs="%(Repository.Identity)">
    <PropertyGroup>
      <GitEnv>GIT_DIR=%(Repository.LocalPath)\.git</GitEnv>
    </PropertyGroup>
    <Exec Command="git reset %(Repository.ResetCommit)" WorkingDirectory="%(Repository.LocalPath)" Condition="'%(Repository.ResetCommit)' != ''"
          EnvironmentVariables="$(GitEnv)" />
    <Exec Command="git checkout %(Repository.OldCommit)" WorkingDirectory="%(Repository.LocalPath)" Condition="'%(Repository.OldCommit)' != ''"
          EnvironmentVariables="$(GitEnv)" />
    <Exec Command="git checkout HEAD" WorkingDirectory="%(Repository.LocalPath)" Condition="'%(Repository.OldCommit)' == '' AND '%(Repository.ResetCommit)' != ''"
          EnvironmentVariables="$(GitEnv)" />
  </Target>

  <Target Name="OverlayRepository"
          DependsOnTargets="DownloadRepositoryV2;CloneRepository;CheckoutSources"
          Outputs="%(ExtractedRepository.Identity)">
    <PropertyGroup>
      <InputDir>%(ExtractedRepository.ExtractPath)</InputDir>
    </PropertyGroup>
    <ItemGroup>
      <_OverlayRepo Include="@(ExtractedRepository)" />
      <OverlaySolutionFiles Remove="@(OverlaySolutionFiles)" />
    </ItemGroup>
    <OverlayDirectory InputDirectory="%(ExtractedRepository.ExtractPath)" OutputDirectory="%(ExtractedRepository.OutputDir)">
      <Output TaskParameter="SolutionFiles" ItemName="OverlaySolutionFiles" />
    </OverlayDirectory>

    <WriteLinesToFile File="%(ExtractedRepository.ExtractSlnListPath)" Lines="@(OverlaySolutionFiles)" />
  </Target>

  <Target Name="CloneV1" DependsOnTargets="CloneRepository;CheckoutSources"/>

  <Target Name="CloneV2" DependsOnTargets="CloneRepository;DownloadRepositoryV2;ResolveHash;CheckoutSources;OverlayRepository"/>

  <Target Name="Clone" DependsOnTargets="CloneV1;CloneV2">
  </Target>

  <Target Name="PrepareV1" Outputs="%(BuildableRepository.Identity)">
    <PropertyGroup>
      <PrepareCommand>$([System.String]::Copy('%(BuildableRepository.PrepareCommand)').Trim())</PrepareCommand>
    </PropertyGroup>
    <Message Importance="High" Text="Preparing Repository %(Repository.Identity)"/>
    <Exec Command="cmd /c &quot;$(PrepareCommand)&quot;" WorkingDirectory="%(BuildableRepository.LocalPath)" ContinueOnError="true" IgnoreStandardErrorWarningFormat="true" LogStandardErrorAsError="false" IgnoreExitCode="true"/>
  </Target>

  <Target Name="Prepare" DependsOnTargets="PrepareV1">
  </Target>

  <Target Name="FindBinlogs" Outputs="%(BuildableRepository.Identity)">
    <ItemGroup>
      <_BinlogToIndexTemp Remove="@(_BinlogToIndexTemp)" />
      <_BinlogToIndexTemp Include="%(BuildableRepository.LocalPath)\**\*.binlog" Repository="%(BuildableRepository.Identity)"/>
      <BinlogToIndex Include="@(_BinlogToIndexTemp)" />
    </ItemGroup>

    <Warning Condition="@(_BinlogToIndexTemp->Count()) == 0" Text="No binlogs found for '%(BuildableRepository.Identity)'" />

  </Target>

  <Target Name="FindSolutions" Outputs="%(ExtractedRepository.Identity)">
    <ItemGroup>
      <_SolutionToIndexTemp Remove="@(_SolutionToIndexTemp)" />
    </ItemGroup>

    <ReadLinesFromFile File="%(ExtractedRepository.ExtractSlnListPath)">
      <Output TaskParameter="Lines" ItemName="_SolutionToIndexTemp"/>
    </ReadLinesFromFile>

    <ItemGroup>
      <SolutionToIndex Include="@(_SolutionToIndexTemp)" Repository="%(ExtractedRepository.Identity)" />
    </ItemGroup>
  </Target>

  <Target Name="AnalyzeV1" DependsOnTargets="FindBinLogs;FindSolutions" Outputs="%(Repository.Identity)">
    <PropertyGroup>
      <BaseCodexCmd>"$(CodexExePath)" analyze --clean --test</BaseCodexCmd>
      <RepoName>%(Repository.Identity)</RepoName>
      <ThisRepoAnalyzeOutDir>$(OutDir)/cdx/analyze/%(Repository.Identity)</ThisRepoAnalyzeOutDir>
    </PropertyGroup>

    <ItemGroup>
      <_AnalyzeArg Remove="@(_AnalyzeArg)" />
      <_AnalyzeArg Include="@(BinlogToIndex->WithMetadataValue('Repository', '$(RepoName)'))">
        <CommandArg>--binLogSearchDirectory "%(FullPath)"</CommandArg>
      </_AnalyzeArg>
      <_AnalyzeArg Include="@(SolutionToIndex->WithMetadataValue('Repository', '$(RepoName)'))">
        <CommandArg>--solution "%(FullPath)"</CommandArg>
      </_AnalyzeArg>
    </ItemGroup>

    <PropertyGroup>

      <SourceIndexCmd>$(BaseCodexCmd)</SourceIndexCmd>
      <SourceIndexCmd Condition="%(Repository.DisableMsBuildWorkspace)">$(SourceIndexCmd) --noMsBuild</SourceIndexCmd>
      <SourceIndexCmd>$(SourceIndexCmd) --path "%(Repository.LocalPath)"</SourceIndexCmd>
      <SourceIndexCmd>$(SourceIndexCmd) --out "$(ThisRepoAnalyzeOutDir)"</SourceIndexCmd>
      <SourceIndexCmd>$(SourceIndexCmd) @(_AnalyzeArg -> '%(CommandArg)', ' ')</SourceIndexCmd>
    </PropertyGroup>

    <Message Text="Analysis command '$(SourceIndexCmd)'" Importance="high" />

    <PropertyGroup>
      <ShouldAnalyze>false</ShouldAnalyze>
      <ShouldAnalyze Condition="(@(_AnalyzeArg->Count()) != 0) OR ('$(ForceAnalyze)' == 'true')">true</ShouldAnalyze>

      <_AnalyzeUploadDir Condition="$(ShouldAnalyze)">$(AnalyzeUploadDir)</_AnalyzeUploadDir>
    </PropertyGroup>

    <Error Condition="!Exists('$(CodexExePath)')" Text="Codex executable not found."/>
    <Exec Command="$(SourceIndexCmd)" Condition="$(ShouldAnalyze)" LogStandardErrorAsError="false"/>

    <ZipDirectory Condition="'$(_AnalyzeUploadDir)' != ''" SourceDirectory="$(ThisRepoAnalyzeOutDir)" DestinationFile="$(_AnalyzeUploadDir)\%(Repository.Identity).zip" />
  </Target>

  <Target Name="Analyze" DependsOnTargets="AnalyzeV1" />

  <Target Name="BuildIndex" DependsOnTargets="Analyze">
    <Copy SourceFiles="@(OverwriteFiles)" DestinationFiles="@(OverwriteFiles -> '$(OutDir)index/%(RecursiveDir)%(Filename)%(Extension)')"/>
  </Target>

  <Target Name="Build" DependsOnTargets="Clone;Prepare;BuildIndex"/>

  <Target Name="Rebuild" DependsOnTargets="Clean;Build"/>
</Project>
